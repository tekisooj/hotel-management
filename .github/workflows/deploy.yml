name: Deploy CDK

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
  pull_request_target:
    types: [closed]

env:
  AWS_REGION: us-east-1
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.set-changed.outputs.changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed services
        id: set-changed
        run: |
          git fetch origin main
          changed=$(git diff --name-only origin/main...HEAD | grep -Eo 'services/[^/]+|infra/cdk/stacks/[^/]+' | cut -d '/' -f2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Changed services: $changed"
          echo "changed=$changed" >> $GITHUB_OUTPUT

  deploy:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed) }}
    env:
      PR_NUMBER: ${{ github.event.pull_request.number || '' }}
      IS_PR: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python and CDK
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: npm install -g aws-cdk

      - name: Install Infra CDK requirements
        run: |
          if [ -f infra/cdk/requirements.txt ]; then
            pip install -r infra/cdk/requirements.txt
          fi

      - name: Install Service requirements
        run: |
          REQ="services/${{ matrix.service }}/requirements.txt"
          if [ -f "$REQ" ]; then
            pip install -r "$REQ"
          fi

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Stack
        run: |
          SERVICE=${{ matrix.service }}
          PASCAL_CASE=$(echo "$SERVICE" | awk -F'_' 'BEGIN{OFS=""} {for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2); print}')
          STACK_NAME="${PASCAL_CASE}Stack-${{ env.IS_PR == 'true' && format('pr-{0}', env.PR_NUMBER) || 'prod' }}"

          echo "Deploying $STACK_NAME..."
          cdk deploy "$STACK_NAME" \
            --app "python3 infra/cdk/stacks/${SERVICE}/app.py" \
            --context env=${{ env.IS_PR == 'true' && 'pr' || 'prod' }} \
            ${{ env.IS_PR == 'true' && format('--context pr_number={0}', env.PR_NUMBER) || '' }} \
            --require-approval never

  destroy-pr:
    if: github.event.pull_request.merged == false && github.event.action == 'closed'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user_service, property_service]
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - uses: actions/checkout@v4
      - run: npm install -g aws-cdk

      - name: Install Infra CDK requirements
        run: |
          if [ -f infra/cdk/requirements.txt ]; then
            pip install -r infra/cdk/requirements.txt
          fi

      - name: Install Service requirements
        run: |
          REQ="services/${{ matrix.service }}/requirements.txt"
          if [ -f "$REQ" ]; then
            pip install -r "$REQ"
          fi

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Destroy PR Stack
        run: |
          SERVICE=${{ matrix.service }}
          PASCAL_CASE=$(echo "$SERVICE" | awk -F'_' 'BEGIN{OFS=""} {for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2); print}')
          STACK_NAME="${PASCAL_CASE}Stack-pr-${PR_NUMBER}"

          echo "Destroying $STACK_NAME..."
          cdk destroy "$STACK_NAME" --force
