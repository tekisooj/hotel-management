name: Deploy Auth UI

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'microfrontends/auth_ui/**'

  push:
    branches: [ main ]
    paths:
      - 'microfrontends/auth_ui/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (int or prod)'
        required: true
        default: int
        type: choice
        options:
          - int
          - prod

env:
  AWS_REGION: us-east-1
  CDK_DEFAULT_ACCOUNT: "914242301564"

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy-pr:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      COGNITO_API_DOMAIN: ${{ vars.COGNITO_API_DOMAIN_INT }}
      COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID_INT }}
      COGNITO_APP_CLIENT_ID: ${{ vars.COGNITO_APP_CLIENT_ID_INT }}
      USER_API_BASE: ${{ vars.USER_API_BASE_INT }}
      HOST_API_BASE: ${{ vars.HOST_API_BASE_INT }}
      GUEST_API_BASE: ${{ vars.GUEST_API_BASE_INT }}
      GUEST_UI_URL: ${{ vars.GUEST_UI_URL_INT }}
      HOST_UI_URL: ${{ vars.HOST_UI_URL_INT }}
      AUTH_UI_URL: ${{ vars.AUTH_UI_URL_INT }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps and generate static site
        working-directory: microfrontends/auth_ui
        run: |
          npm ci || npm install --no-fund --no-audit
          npm run generate
      - name: Setup Python and CDK
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: npm install -g aws-cdk
      - name: Install infra requirements
        working-directory: microfrontends/auth_ui/infra
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.CDK_DEFAULT_ACCOUNT }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy Auth UI (INT)
        working-directory: microfrontends/auth_ui/infra
        run: |
          cdk deploy "AuthUiStack-int" \
            --app "python3 app.py" \
            --context env=int \
            --require-approval never

  build-and-deploy-int:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    env:
      COGNITO_API_DOMAIN: ${{ vars.COGNITO_API_DOMAIN_INT }}
      COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID_INT }}
      COGNITO_APP_CLIENT_ID: ${{ vars.COGNITO_APP_CLIENT_ID_INT }}
      USER_API_BASE: ${{ vars.USER_API_BASE_INT }}
      HOST_API_BASE: ${{ vars.HOST_API_BASE_INT }}
      GUEST_API_BASE: ${{ vars.GUEST_API_BASE_INT }}
      GUEST_UI_URL: ${{ vars.GUEST_UI_URL_INT }}
      HOST_UI_URL: ${{ vars.HOST_UI_URL_INT }}
      AUTH_UI_URL: ${{ vars.AUTH_UI_URL_INT }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps and generate static site
        working-directory: microfrontends/auth_ui
        run: |
          npm ci || npm install --no-fund --no-audit
          npm run generate
      - name: Setup Python and CDK
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: npm install -g aws-cdk
      - name: Install infra requirements
        working-directory: microfrontends/auth_ui/infra
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.CDK_DEFAULT_ACCOUNT }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy Auth UI (INT)
        working-directory: microfrontends/auth_ui/infra
        run: |
          cdk deploy "AuthUiStack-int" \
            --app "python3 app.py" \
            --context env=int \
            --require-approval never

  build-and-deploy-prod:
    if: ${{ github.event_name == 'push' }}
    needs: build-and-deploy-int
    runs-on: ubuntu-latest
    env:
      COGNITO_API_DOMAIN: ${{ vars.COGNITO_API_DOMAIN_PROD }}
      COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID_PROD }}
      COGNITO_APP_CLIENT_ID: ${{ vars.COGNITO_APP_CLIENT_ID_PROD }}
      USER_API_BASE: ${{ vars.USER_API_BASE_PROD }}
      HOST_API_BASE: ${{ vars.HOST_API_BASE_PROD }}
      GUEST_API_BASE: ${{ vars.GUEST_API_BASE_PROD }}
      GUEST_UI_URL: ${{ vars.GUEST_UI_URL_PROD }}
      HOST_UI_URL: ${{ vars.HOST_UI_URL_PROD }}
      AUTH_UI_URL: ${{ vars.AUTH_UI_URL_PROD }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps and generate static site
        working-directory: microfrontends/auth_ui
        run: |
          npm ci || npm install --no-fund --no-audit
          npm run generate
      - name: Setup Python and CDK
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: npm install -g aws-cdk
      - name: Install infra requirements
        working-directory: microfrontends/auth_ui/infra
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.CDK_DEFAULT_ACCOUNT }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy Auth UI (PROD)
        working-directory: microfrontends/auth_ui/infra
        run: |
          cdk deploy "AuthUiStack-prod" \
            --app "python3 app.py" \
            --context env=prod \
            --require-approval never

  manual-deploy:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      TARGET_ENV: ${{ github.event.inputs.environment }}
      COGNITO_API_DOMAIN: ${{ github.event.inputs.environment == 'prod' && vars.COGNITO_API_DOMAIN_PROD || vars.COGNITO_API_DOMAIN_INT }}
      COGNITO_USER_POOL_ID: ${{ github.event.inputs.environment == 'prod' && vars.COGNITO_USER_POOL_ID_PROD || vars.COGNITO_USER_POOL_ID_INT }}
      COGNITO_APP_CLIENT_ID: ${{ github.event.inputs.environment == 'prod' && vars.COGNITO_APP_CLIENT_ID_PROD || vars.COGNITO_APP_CLIENT_ID_INT }}
      USER_API_BASE: ${{ github.event.inputs.environment == 'prod' && vars.USER_API_BASE_PROD || vars.USER_API_BASE_INT }}
      HOST_API_BASE: ${{ github.event.inputs.environment == 'prod' && vars.HOST_API_BASE_PROD || vars.HOST_API_BASE_INT }}
      GUEST_API_BASE: ${{ github.event.inputs.environment == 'prod' && vars.GUEST_API_BASE_PROD || vars.GUEST_API_BASE_INT }}
      GUEST_UI_URL: ${{ github.event.inputs.environment == 'prod' && vars.GUEST_UI_URL_PROD || vars.GUEST_UI_URL_INT }}
      HOST_UI_URL: ${{ github.event.inputs.environment == 'prod' && vars.HOST_UI_URL_PROD || vars.HOST_UI_URL_INT }}
      AUTH_UI_URL: ${{ github.event.inputs.environment == 'prod' && vars.AUTH_UI_URL_PROD || vars.AUTH_UI_URL_INT }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps and generate static site
        working-directory: microfrontends/auth_ui
        run: |
          npm ci || npm install --no-fund --no-audit
          npm run generate
      - name: Setup Python and CDK
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: npm install -g aws-cdk
      - name: Install infra requirements
        working-directory: microfrontends/auth_ui/infra
        run: pip install -r requirements.txt
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.CDK_DEFAULT_ACCOUNT }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy Auth UI (Manual)
        working-directory: microfrontends/auth_ui/infra
        run: |
          cdk deploy "AuthUiStack-${TARGET_ENV}" \
            --app "python3 app.py" \
            --context env=${TARGET_ENV} \
            --require-approval never
